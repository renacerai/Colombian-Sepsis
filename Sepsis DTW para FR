import os
import pandas as pd
import numpy as np
from time import time
from tslearn.metrics import cdist_dtw
import matplotlib.pyplot as plt
import scipy.spatial as sp, scipy.cluster.hierarchy as hc
import seaborn as sns; sns.set(color_codes=True)
import pickle

%matplotlib inline 

#para frecuencia cardiaca 
data_fold = '/content/Frecuencia Cardiaca Trayectoria.xlsx - Tabla de variables (1).csv'
result_fold = '/content/results' 


# Cree el directorio 
os.makedirs(result_fold, exist_ok=True) 

data_type = 'FC_track'
data = pd.read_csv(data_fold)
print(data.head())

# Extraer columnas F1 a G6 como series de tiempo
time_series_data = data[['F1', 'F2', 'F3', 'F4', 'F5', 'F6']]

# Convertir a NumPy array para tslearn
time_series_array = time_series_data.to_numpy()

id_paciente = list(data.index)
score_normalized = data.sub(data.min(axis=1), axis=0).div(data.max(axis=1) - data.min(axis=1), axis=0).fillna(0)
score_normalized = np.array(score_normalized)

print('running dtw....')
start = time()
dis = cdist_dtw(score_normalized,n_jobs=4)

c_time = time() - start
print(c_time)

score_id=[id_paciente,dis]

with open(os.path.join(result_fold,data_type+'.pkl'),'wb') as f:
    pickle.dump(score_id,f)

# obtaining clustermap figure
linkage = hc.linkage(sp.distance.squareform(dis,checks=False), method='complete')
ns_plot = sns.clustermap(dis, row_linkage=linkage, col_linkage=linkage,standard_scale=1)
ns_plot.savefig(result_fold+'/'+'clustermap_'+ data_type +".png", dpi = 600)
